// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String   @unique
  password  String
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  address   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RoleId  Role?     @relation(fields: [roleId], references: [id])
  roleId  Int?
  Product Product[]
  Cart    Cart[]
  Order   Order[]

  @@map("users")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User       User[]
  Permission PermissionRole[]

  @@map("roles")
}

model Permission {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Permission PermissionRole[]

  @@map("permissions")
}

model PermissionRole {
  Role         Role        @relation(fields: [roleId], references: [id])
  roleId       Int
  Permission   Permission? @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@id([roleId, permissionId])
  @@map("permission_role")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  price       Int
  description String   @db.Text
  quantity    Int
  deleted     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  User         User?           @relation(fields: [userId], references: [id])
  userId       Int?
  ProductImage ProductImages[]
  Category     Category?       @relation(fields: [categoryId], references: [id])
  categoryId   Int?
  Cart         Cart[]
  OrderItem    OrderItem[]

  @@map("products")
}

model ProductImages {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?

  @@map("product_images")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product[]

  @@map("categories")
}

model Cart {
  id        Int      @id @default(autoincrement())
  productId Int?
  quantity  Int      @default(1)
  total     Float    @default(0) @db.Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product? @relation(fields: [productId], references: [id])
  User    User?    @relation(fields: [userId], references: [id])
  userId  Int?

  @@map("cart")
}

model Order {
  id        Int         @id @default(autoincrement())
  date      DateTime    @default(now())
  invoice   String
  total     Float       @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  User      User?       @relation(fields: [userId], references: [id])
  userId    Int?
  status    StatusOrder

  OrderItem OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Int
  total     Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order     Order?   @relation(fields: [orderId], references: [id])
  orderId   Int?
  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?

  @@map("order_items")
}

enum StatusOrder {
  waitingForPayment @map("Waiting for Payment")
  paid              @map("Paid")
  canceled          @map("Canceled")
}
